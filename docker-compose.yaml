# a sample compose file
version: '3'
services:

 # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  docker_example_user_code:
    build:
      context: ./compose/code_image
      dockerfile: Dockerfile_user_code
    container_name: ${STACK_NAME:-defstack}_user_code
    image: docker_example_user_code_image
    restart: always
    environment:
      DAGSTER_HOME: /opt/dagster/dagster_home
      DAGSTER_POSTGRES_HOST: ${SQL_META_HOST}
      DAGSTER_POSTGRES_PORT: ${SQL_META_PORT}
      DAGSTER_POSTGRES_DB: ${SQL_META_DB}
      DAGSTER_POSTGRES_USER: ${SQL_META_USER}
      DAGSTER_POSTGRES_PASSWORD: ${SQL_META_PASSWORD}
      DAGSTER_CURRENT_IMAGE: 'docker_example_user_code_image'
    networks:
      - mydefaultstack

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  docker_example_webserver:
    build:
      context: ./compose/host_image
      dockerfile: Dockerfile_dagster
    command:
      - dagster-webserver
      - -h
      - '0.0.0.0'
      - -p
      - '3000'
      - -w
      - workspace.yaml
    container_name: ${STACK_NAME:-defstack}_webserver
    expose:
      - '3000'
    ports:
      - '3000:3000'
    environment:
      DAGSTER_HOME: /opt/dagster/dagster_home
      DAGSTER_POSTGRES_HOST: ${SQL_META_HOST}
      DAGSTER_POSTGRES_PORT: ${SQL_META_PORT}
      DAGSTER_POSTGRES_DB: ${SQL_META_DB}
      DAGSTER_POSTGRES_USER: ${SQL_META_USER}
      DAGSTER_POSTGRES_PASSWORD: ${SQL_META_PASSWORD}
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - mydefaultstack
    depends_on:
      docker_example_user_code:
        condition: service_started

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  docker_example_daemon:
    build:
      context: ./compose/host_image
      dockerfile: Dockerfile_dagster
    # entrypoint:
    #   - dagster-daemon
    #   - run
    container_name: ${STACK_NAME:-defstack}_daemon
    restart: on-failure
    environment:
      DAGSTER_HOME: /opt/dagster/dagster_home
      DAGSTER_POSTGRES_HOST: ${SQL_META_HOST}
      DAGSTER_POSTGRES_PORT: ${SQL_META_PORT}
      DAGSTER_POSTGRES_DB: ${SQL_META_DB}
      DAGSTER_POSTGRES_USER: ${SQL_META_USER}
      DAGSTER_POSTGRES_PASSWORD: ${SQL_META_PASSWORD}
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - mydefaultstack
    depends_on:
      docker_example_user_code:
        condition: service_started

networks:
  mydefaultstack:
    name: mydefaultstack
    external: true
